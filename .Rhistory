burnin <- floor(iterations/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Differing priors
model.fit.vague <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.flat <- jags.model(file="src/Regression2JAGSFlatPrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.weak <- jags.model(file="src/Regression2JAGSWeakVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Creating samples
model.samples.vague <- coda.samples(model.fit.vague, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.flat <- coda.samples(model.fit.flat, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.weak <- coda.samples(model.fit.weak, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Summary
summary.vague <- summary(window(model.samples.vague, start = burnin))
summary.flat <- summary(window(model.samples.flat, start = burnin))
summary.weak <- summary(window(model.samples.weak, start = burnin))
#GGS
S.vague <- ggs(model.samples.vague)
S.flat <- ggs(model.samples.flat)
S.weak <- ggs(model.samples.weak)
#PriorVar
S.vague.NEW <- mutate(S.vague, PriorVar = "Vague")
S.flat.NEW <- mutate(S.vague, PriorVar = "Flat")
S.weak.NEW <- mutate(S.vague, PriorVar = "Weak")
#Append Flat->Weak->Vague, by having Flat, Weak and then Vague
S.total <- dplyr::bind_rows(S.flat.NEW,S.weak.NEW,S.vague.NEW)
str(S.total)
a<-ggplot(mpg,aes(hwy))
a+geom_area(stat="bin")
t<-ggplot(S.total, aes(x = value))+facet_grid(Parameter ~ Chain)
t+geom_density()
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor((iterations+100)/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
model.fit.vague <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.flat <- jags.model(file="src/Regression2JAGSFlatPrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.weak <- jags.model(file="src/Regression2JAGSWeakVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Creating samples
model.samples.vague <- coda.samples(model.fit.vague, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.flat <- coda.samples(model.fit.flat, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.weak <- coda.samples(model.fit.weak, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Creating samples
model.samples.vague <- coda.samples(model.fit.vague, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.flat <- coda.samples(model.fit.flat, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.weak <- coda.samples(model.fit.weak, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Summary
summary.vague <- summary(window(model.samples.vague, start = burnin))
summary.flat <- summary(window(model.samples.flat, start = burnin))
summary.weak <- summary(window(model.samples.weak, start = burnin))
#GGS
S.vague <- ggs(model.samples.vague)
S.flat <- ggs(model.samples.flat)
S.weak <- ggs(model.samples.weak)
#Structure
str(S.vague)
str(S.flat)
str(S.weak)
#PriorVar
S.vague.NEW <- mutate(S.vague, PriorVar = "Vague")
S.flat.NEW <- mutate(S.vague, PriorVar = "Flat")
S.weak.NEW <- mutate(S.vague, PriorVar = "Weak")
#Append Flat->Weak->Vague, by having Flat, Weak and then Vague
S.total <- dplyr::bind_rows(S.flat.NEW,S.weak.NEW,S.vague.NEW)
str(S.total)
#GGPLOT S.total
t<-ggplot(S.total, aes(x = value))+facet_grid(Parameter ~ Chain)
t+geom_density()
t<-ggplot(S.total, aes(x = parameter, y = value))+facet_grid(Parameter ~ Chain)
t+geom_density()
t<-ggplot(S.total, aes(x = Parameter, y = value))+facet_grid(Parameter ~ Chain)
t+geom_density()
t<-ggplot(S.total, aes(value))+facet_grid(Parameter ~ Chain)
t+geom_density()
t<-ggplot(S.total, aes(value))+facet_grid(~Parameter, scales = "free")
t+geom_density()
View(S.total)
#GGPLOT S.total
t<-ggplot(S.total, aes(value))+facet_grid(Parameter ~ Chain)
t+geom_density(aes(colour = factor(PriorVar)))
t<-ggplot(S.total, aes(value))
t+geom_density(aes(colour = factor(PriorVar)))
View(S.total)
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))+facet_grid(vars(Parameter), vars(Chain), scales = "free_y")
t+geom_density(aes())
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))+facet_grid(vars(PriorVar), vars(Chain), scales = "free_y")
t+geom_density(aes())
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(Parameter)))+facet_grid(vars(PriorVar), vars(Chain), scales = "free_y")
t+geom_density(aes())
#Initialising the code with the intersect in play and the variance of the noise.
model.inits <- list(invSigma2=1, alpha=1, beta=0, gamma=0)
#Number of iterations
iterations <- 10000
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor((iterations+1000)/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Differing priors
model.fit.vague <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.flat <- jags.model(file="src/Regression2JAGSFlatPrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.weak <- jags.model(file="src/Regression2JAGSWeakVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Initialising the code with the intersect in play and the variance of the noise.
model.inits <- list(invSigma2=1, alpha=1, beta=0, gamma=0)
#Number of iterations
iterations <- 10000
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor((iterations+1000)/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Differing priors
model.fit.vague <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.flat <- jags.model(file="src/Regression2JAGSFlatPrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.weak <- jags.model(file="src/Regression2JAGSWeakVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Creating samples
model.samples.vague <- coda.samples(model.fit.vague, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.flat <- coda.samples(model.fit.flat, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.weak <- coda.samples(model.fit.weak, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Summary
summary.vague <- summary(window(model.samples.vague, start = burnin))
summary.flat <- summary(window(model.samples.flat, start = burnin))
summary.weak <- summary(window(model.samples.weak, start = burnin))
#GGS
S.vague <- ggs(model.samples.vague)
S.flat <- ggs(model.samples.flat)
S.weak <- ggs(model.samples.weak)
#Plot to file
ggmcmc(S.vague, file="fig/model_simple-diag.vague.pdf", param_page=2)
ggmcmc(S.flat, file="fig/model_simple-diag.flat.pdf", param_page=2)
ggmcmc(S.weak, file="fig/model_simple-diag.weak.pdf", param_page=2)
#Structure
str(S.vague)
str(S.flat)
str(S.weak)
#PriorVar
S.vague.NEW <- mutate(S.vague, PriorVar = "Vague")
S.flat.NEW <- mutate(S.vague, PriorVar = "Flat")
S.weak.NEW <- mutate(S.vague, PriorVar = "Weak")
#Append Flat->Weak->Vague, by having Flat, Weak and then Vague
S.total <- dplyr::bind_rows(S.flat.NEW,S.weak.NEW,S.vague.NEW)
str(S.total)
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(Parameter)))+facet_grid(vars(PriorVar), vars(Chain), scales = "free_y")
t+geom_density(aes())
max(S.total$value)
#Subsetting to only alpha
S.vague.alpha <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
S.flat.alpha <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
S.weak.alpha <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
#Subsetting to only beta
S.vague.beta <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
S.flat.beta <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
S.weak.beta <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
#Subsetting to only gamma
S.vague.gamma <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
S.flat.gamma <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
S.weak.gamma <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
#Subsetting to only sigma2
S.vague.sigma2 <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
S.flat.sigma2 <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
S.weak.sigma2 <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
t1<- ggplot(S.total, aes(value))
t1<- ggplot(S.total, aes(value, stat(density)))+facet_grid(Parameter ~ PriorVar scales = "free_y")
t1<- ggplot(S.total, aes(value, stat(density)))+facet_grid(Parameter ~ PriorVar, scales = "free_y")
t+geom_density(aes(group = Chain))
t1+geom_density(aes(group = Chain))
t1+geom_density(aes(colour = Chain))
t+geom_density(
t1<- ggplot(S.total, aes(value, stat(density)))+facet_grid(Parameter ~ Chain, scales = "free_y")
t1+geom_density(aes(colour = PriorVar)))
t+geom_density(
t1<- ggplot(S.total, aes(value, stat(density)))+facet_grid(Parameter ~ Chain, scales = "free_y")
t1+geom_density(aes(colour = PriorVar)))
t1<- ggplot(S.total, aes(value, stat(density)))+facet_grid(Parameter ~ Chain, scales = "free_y")
t1+geom_density(aes(colour = PriorVar))
t1<- ggplot(S.total, aes(x = value, stat(density)))+facet_grid(Parameter ~ Chain, scales = "free_y")
t1+geom_density(aes(colour = PriorVar))
#Subsetting to only alpha
S.vague.alpha <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
S.flat.alpha <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
S.weak.alpha <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "alpha")
#Subsetting to only beta
S.vague.beta <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
S.flat.beta <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
S.weak.beta <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "beta")
#Subsetting to only gamma
S.vague.gamma <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
S.flat.gamma <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
S.weak.gamma <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "gamma")
#Subsetting to only sigma2
S.vague.sigma2 <- S.vague.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
S.flat.sigma2 <- S.flat.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
S.weak.sigma2 <- S.weak.NEW %>% select(Iteration, Chain, Parameter, value) %>% filter(Parameter == "sigma2")
t1<- ggplot(S.total, aes(x = value))+facet_grid(Parameter ~ Chain, scales = "free_y")
t1+geom_density(aes(colour = PriorVar))
plot(model.samples.flat)
plot(model.samples.vague)
plot(c(model.samples.flat,model.samples.weak,model.samples.vague))
#main file
#If you do not have these packages installed uncomment the line below and run.
#install.packages(c("ggplot2","dplyr","tidyr","runjags","coda","rjags","ggmcmc"))
library(ggplot2)
library(dplyr)
library(tidyr)
library(runjags)
library(coda)
library(rjags)
require(rjags)
require(coda)
#require(invgamma)
library(ggmcmc)
library(gridExtra)
library(ggpubr)
#Include the data file
#source(file = "data/data.R") for ease I have included the data here
y = c(13.9,27.3,21.0,3.7,48.4,86.4,7.1,36.6,22.7,11.4,40.7,67.0,83.7,111.9,120.8,11.4,18.2,8.6,34.6,70.4)
x = c(3,6,4,1,9,15,1,7,6,2,9,12,14,17,18,3,5,2,8,12)
x2 = x^2
data = data.frame(y,x,x2)
#We name of the variables.
y <- data[,1]
x1 <- data[,2]
x2 <- data[,3]
n <- nrow(data)
#Initialising the code with the intersect in play and the variance of the noise.
model.inits <- list(invSigma2=1, alpha=1, beta=0, gamma=0)
#Number of iterations
iterations <- 10000
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor((iterations+1000)/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Differing priors
model.fit.vague <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.flat <- jags.model(file="src/Regression2JAGSFlatPrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
model.fit.weak <- jags.model(file="src/Regression2JAGSWeakVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Creating samples
model.samples.vague <- coda.samples(model.fit.vague, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.flat <- coda.samples(model.fit.flat, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
model.samples.weak <- coda.samples(model.fit.weak, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Summary
summary.vague <- summary(window(model.samples.vague, start = burnin))
summary.flat <- summary(window(model.samples.flat, start = burnin))
summary.weak <- summary(window(model.samples.weak, start = burnin))
########################################################################################################################
########################################################################################################################
########################################################################################################################
#Model done and now plotting
#GGS
S.vague <- ggs(model.samples.vague)
S.flat <- ggs(model.samples.flat)
S.weak <- ggs(model.samples.weak)
#Plot to file
ggmcmc(S.vague, file="fig/model_simple-diag.vague.pdf", param_page=2)
ggmcmc(S.flat, file="fig/model_simple-diag.flat.pdf", param_page=2)
ggmcmc(S.weak, file="fig/model_simple-diag.weak.pdf", param_page=2)
#Structure
str(S.vague)
str(S.flat)
str(S.weak)
#PriorVar
S.vague.NEW <- mutate(S.flat, PriorVar = "Vague")
S.flat.NEW <- mutate(S.weak, PriorVar = "Flat")
S.weak.NEW <- mutate(S.vague, PriorVar = "Weak")
#Append Flat->Weak->Vague, by having Flat, Weak and then Vague
S.total <- dplyr::bind_rows(S.flat.NEW,S.weak.NEW,S.vague.NEW)
str(S.total)
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))+facet_grid(vars(PriorVar), vars(Chain), scales = "free_y")
t+geom_density()
#GGPLOT S.total
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))+facet_grid(vars(Parameter), vars(Chain), scales = "free_y")
t+geom_density()
t<-ggplot(S.total, aes(value,colour = factor(PriorVar)))+facet_grid(vars(Parameter), vars(Chain), scales = "free")
t+geom_density()
t<-ggplot(S.total, aes(x = value,colour = factor(PriorVar)))+facet_grid(vars(Parameter), vars(Chain), scales = "free")
t+geom_density()
#GGPLOT S.total
t<-ggplot(S.total, aes(x = value))+facet_grid(vars(Parameter), vars(Chain), scales = "free")
t+geom_density(colour = factor(PriorVar))
#GGPLOT S.total
t<-ggplot(S.total, aes(x = value))+facet_grid(vars(Parameter), vars(Chain), scales = "free")
t+geom_density(aes(colour = factor(PriorVar)))
t+geom_density(aes(colour = factor(PriorVar)))+scale_x_continuous(limits = c(0, 10))
#GGPLOT S.total
t<-ggplot(S.total, aes(x = value))+facet_grid(vars(Parameter), vars(Chain), scales = "free_x")
t+geom_density(aes(colour = factor(PriorVar)))+scale_x_continuous(limits = c(0, 10))
t<-ggplot(S.total, aes(x = value, group = gamma))
t+geom_density(aes(colour = factor(PriorVar)))
t+geom_density(aes(colour = factor(PriorVar)))+scale_x_continuous(limits = c(0, 1))
source('~/Documents/R Projects/SMSTC/src/Models_Differing_Priors.R', echo=TRUE)
#GGPLOT S.total group gamma
t<-ggplot(S.total, aes(x = value, group = Parameter))
t+geom_density(aes(colour = factor(PriorVar)))
#GGPLOT S.total group gamma
t<-ggplot(S.total, aes(value, group = Parameter))
t+geom_density(aes(colour = factor(PriorVar)))
gammmmma <- S.total %>% select(Iteration, Chain, Parameter, value, PriorVar) %>% filter(Parameter == "gamma")
#GGPLOT S.total group gamma
tgam<-ggplot(gammmmma, aes(value, colour = PriorVar))
tgam+geom_density()
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()
alppha <- S.total %>% select(Iteration, Chain, Parameter, value, PriorVar) %>% filter(Parameter == "alpha")
betta <- S.total %>% select(Iteration, Chain, Parameter, value, PriorVar) %>% filter(Parameter == "beta")
gammmmma <- S.total %>% select(Iteration, Chain, Parameter, value, PriorVar) %>% filter(Parameter == "gamma")
sigggma <- S.total %>% select(Iteration, Chain, Parameter, value, PriorVar) %>% filter(Parameter == "sigma2")
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()
ggarrange(talpha,tbeta,tgamma,tsigma2)
install.packages('latex2exp')
library(latex2exp)
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX($\\alpha$))+facet_grid(Chain~.)
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.)
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\beta$'))+facet_grid(Chain~.)
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.)
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.)
ggarrange(talpha,tbeta,tgamma,tsigma2)
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')
ggarrange(talpha,tbeta,tgamma,tsigma2)
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_histogram()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.)
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_histogram()+ggtitle(TeX('$\\beta$'))+facet_grid(Chain~.)
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_histogram()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.)
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_histogram()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')
ggarrange(talpha,tbeta,tgamma,tsigma2)
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density(aes(fill = Chain))+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.)
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density(aes(fill = Chain))+ggtitle(TeX('$\\alpha$'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density(aes(fill = Chain))+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')
talpha
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density(+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')
talpha
talpha
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0, 20))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))
talpha
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\beta$'))+facet_grid(Chain~.)
tbeta
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\beta$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0, 6))
tbeta
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.)
tgamma
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0.5, 3.0))
tgamma
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0.5, 3.0))
tgamma
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')
tgamma
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-0.2, 0.4))
tgamma
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0.0, 0.4))
tgamma
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')
ggarrange(talpha,tbeta,tgamma,tsigma2)
tsigma2
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')
ggarrange(talpha,tbeta,tgamma,tsigma2)+scale_x_continuous(limits = c(0.0, 15))
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')+scale_x_continuous(limits = c(0.0, 15))
tsigma2
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')+scale_x_continuous(limits = c(0.0, 25))
tsigma2
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')+scale_x_continuous(limits = c(0.0, 35))
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')+scale_x_continuous(limits = c(0.0, 35))
tsigma2
ggarrange(talpha,tbeta,tgamma,tsigma2)
ggarrange(talpha,tbeta,tgamma,tsigma2)+ggtitle(TeX('Posterior Distributions'))
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+guides(colour=guide_legend(title="Different Priors"))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+guides(colour=guide_legend(title="Different Priors"),breaks = c(TeX('U(-100,100'),TeX('N(0,0.000001'),TeX('N(0,0.0001')))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+guides(colour=guide_legend(title="Different Priors",breaks = c(TeX('U(-100,100'),TeX('N(0,0.000001'),TeX('N(0,0.0001'))))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+guides(colour=guide_legend(title="Different Priors",breaks = c('U(-100,100','N(0,0.000001','N(0,0.0001')))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Different Priors",breaks = c('U(-100,100','N(0,0.000001','N(0,0.0001'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Different Priors",labels = c('U(-100,100','N(0,0.000001','N(0,0.0001'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Different Priors",labels = c(TeX('U(-100,100)'),'N(0,0.000001)','N(0,0.0001)'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Different Priors",labels = c(TeX('$U(-100,100)$'),'N(0,0.000001)','N(0,0.0001)'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Different Priors",labels = c(TeX('$ U(-100,100) $'),'N(0,0.000001)','N(0,0.0001)'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Prior Sensitivity alpha",labels = c('U(-100,100)','N(0,0.000001)','N(0,0.0001)'))
talpha
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Prior Sensitivity alpha",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
talpha
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Prior Sensitivity alpha",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\beta$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0, 6))+scale_colour_discrete(name ="Prior Sensitivity beta",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(Chain~.,scales = 'free_x')+scale_x_continuous(limits = c(0.0, 0.4))+scale_colour_discrete(name ="Prior Sensitivity gamma",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(Chain~.,scales = 'free')+scale_x_continuous(limits = c(0.0, 35))+scale_colour_discrete(name ="Prior Sensitivity sigma2",labels = c('Flat \nU(0,20)','Vague \nInvGFamma(0.001,0.001)','Weak \nInvGamma(1,1)'))
ggarrange(talpha,tbeta,tgamma,tsigma2)
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(.~Chain,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Prior Sensitivity alpha",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
talpha
#GGPLOT S.total group gamma
talpha<-ggplot(alppha, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\alpha$'))+facet_grid(.~Chain,scales = 'free_x')+scale_x_continuous(limits = c(-10, 20))+scale_colour_discrete(name ="Prior Sensitivity alpha",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tbeta<-ggplot(betta, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\beta$'))+facet_grid(.~Chain,scales = 'free_x')+scale_x_continuous(limits = c(0, 6))+scale_colour_discrete(name ="Prior Sensitivity beta",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tgamma<-ggplot(gammmmma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\gamma$'))+facet_grid(.~Chain,scales = 'free_x')+scale_x_continuous(limits = c(0.0, 0.4))+scale_colour_discrete(name ="Prior Sensitivity gamma",labels = c('Flat \nU(-100,100)','Vague \nN(0,0.000001)','Weak \nN(0,0.0001)'))
tsigma2<-ggplot(sigggma, aes(value, colour = PriorVar))+geom_density()+ggtitle(TeX('$\\sigma^2$'))+facet_grid(.~Chain,scales = 'free')+scale_x_continuous(limits = c(0.0, 35))+scale_colour_discrete(name ="Prior Sensitivity sigma2",labels = c('Flat \nU(0,20)','Vague \nInvGFamma(0.001,0.001)','Weak \nInvGamma(1,1)'))
ggarrange(talpha,tbeta,tgamma,tsigma2)
ggarrange(talpha,tbeta,tgamma,tsigma2,ncol = 1)
ggarrange(talpha,tbeta,tgamma,tsigma2,ncol = 2)
ggarrange(talpha,tbeta,tgamma,tsigma2,ncol = 1, nrow = 4)
#Shows plot in grid
plotpriors <- ggarrange(talpha,tbeta,tgamma,tsigma2,ncol = 1, nrow = 4)
#Shows plot in grid
plotpriors <- ggarrange(talpha,tbeta,tgamma,tsigma2,ncol = 1, nrow = 4)
ggsave("fig/DifferingPriorsSensitivity.pdf", plot = plotpriors, dpi = "retina")
View(S.weak)
#main file
#If you do not have these packages installed uncomment the line below and run.
#install.packages(c("ggplot2","dplyr","tidyr","runjags","coda","rjags","ggmcmc"))
library(ggplot2)
library(dplyr)
library(tidyr)
library(runjags)
library(coda)
library(rjags)
require(rjags)
require(coda)
#require(invgamma)
library(ggmcmc)
#Include the data file
#source(file = "data/data.R") for ease I have included the data here
y = c(13.9,27.3,21.0,3.7,48.4,86.4,7.1,36.6,22.7,11.4,40.7,67.0,83.7,111.9,120.8,11.4,18.2,8.6,34.6,70.4)
x = c(3,6,4,1,9,15,1,7,6,2,9,12,14,17,18,3,5,2,8,12)
x2 = x^2
data = data.frame(y,x,x2)
#We name of the variables.
y <- data[,1]
x1 <- data[,2]
x2 <- data[,3]
n <- nrow(data)
#Initialising the code with the intersect in play and the variance of the noise.
model.inits <- list(invSigma2=1, alpha=1, beta=0, gamma=0)
#Number of iterations
iterations <- 10000
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor(iterations/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Fitting model from JAGS code and specifying the variable names according to the data. x2 is x^2 which has been performed in the file = "data/data.R"
model.fit <- jags.model(file="src/Regression2JAGS.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Coda samples coerces the data from model.fit to a list of teh MCMC flavour.
model.samples <- coda.samples(model.fit, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#A basic summary of the results, including the mean of the parameters.
summary(window(model.samples, start = burnin))
#main file
#If you do not have these packages installed uncomment the line below and run.
#install.packages(c("ggplot2","dplyr","tidyr","runjags","coda","rjags","ggmcmc"))
library(ggplot2)
library(dplyr)
library(tidyr)
library(runjags)
library(coda)
library(rjags)
require(rjags)
require(coda)
#require(invgamma)
library(ggmcmc)
#Include the data file
#source(file = "data/data.R") for ease I have included the data here
y = c(13.9,27.3,21.0,3.7,48.4,86.4,7.1,36.6,22.7,11.4,40.7,67.0,83.7,111.9,120.8,11.4,18.2,8.6,34.6,70.4)
x = c(3,6,4,1,9,15,1,7,6,2,9,12,14,17,18,3,5,2,8,12)
x2 = x^2
data = data.frame(y,x,x2)
#We name of the variables.
y <- data[,1]
x1 <- data[,2]
x2 <- data[,3]
n <- nrow(data)
#Initialising the code with the intersect in play and the variance of the noise.
model.inits <- list(invSigma2=1, alpha=1, beta=0, gamma=0)
#Number of iterations
iterations <- 10000
#Using a conservative burn in period, starting after half of the iterations have been performed.
burnin <- floor(iterations/2)
#Default number of chains in JAGS is 3, but using two for simplicity of view.
chains <- 2
#Fitting model from JAGS code and specifying the variable names according to the data. x2 is x^2 which has been performed in the file = "data/data.R"
model.fit <- jags.model(file="src/Regression2JAGS.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Coda samples coerces the data from model.fit to a list of teh MCMC flavour.
model.samples <- coda.samples(model.fit, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Fitting model from JAGS code and specifying the variable names according to the data. x2 is x^2 which has been performed in the file = "data/data.R"
model.fit <- jags.model(file="src/Regression2VagueJAGS.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Coda samples coerces the data from model.fit to a list of teh MCMC flavour.
model.samples <- coda.samples(model.fit, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#Fitting model from JAGS code and specifying the variable names according to the data. x2 is x^2 which has been performed in the file = "data/data.R"
model.fit <- jags.model(file="src/Regression2JAGSVaguePrior.txt", data=list(n=n, y=y, x1=x1, x2=x2), inits=model.inits, n.chains = chains)
#Coda samples coerces the data from model.fit to a list of teh MCMC flavour.
model.samples <- coda.samples(model.fit, c("alpha", "beta", "gamma", "sigma2"), n.iter=iterations)
#A basic summary of the results, including the mean of the parameters.
summary(window(model.samples, start = burnin))
